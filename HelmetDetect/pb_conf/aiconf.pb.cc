// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aiconf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "aiconf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace aicfg {
class AIConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AIConfig> {
} _AIConfig_default_instance_;
class AISetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AISet> {
} _AISet_default_instance_;

namespace protobuf_aiconf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIConfig, model_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIConfig, runtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIConfig, data_format_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISet, config_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(AIConfig)},
  { 8, -1, sizeof(AISet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AIConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AISet_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "aiconf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _AIConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _AISet_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AIConfig_default_instance_.DefaultConstruct();
  _AISet_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014aiconf.proto\022\005aicfg\"g\n\010AIConfig\022\022\n\nmod"
      "el_path\030\001 \001(\t\022\037\n\007runtime\030\002 \001(\0162\016.aicfg.R"
      "unTime\022&\n\013data_format\030\003 \001(\0162\021.aicfg.Data"
      "Format\"(\n\005AISet\022\037\n\006config\030\001 \003(\0132\017.aicfg."
      "AIConfig*8\n\007RunTime\022\007\n\003CPU\020\000\022\007\n\003GPU\020\001\022\007\n"
      "\003DSP\020\002\022\007\n\003APU\020\003\022\t\n\005NNAPI\020\004* \n\nDataFormat"
      "\022\010\n\004NCHW\020\000\022\010\n\004NHWC\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 268);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "aiconf.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_aiconf_2eproto

const ::google::protobuf::EnumDescriptor* RunTime_descriptor() {
  protobuf_aiconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aiconf_2eproto::file_level_enum_descriptors[0];
}
bool RunTime_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataFormat_descriptor() {
  protobuf_aiconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aiconf_2eproto::file_level_enum_descriptors[1];
}
bool DataFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AIConfig::kModelPathFieldNumber;
const int AIConfig::kRuntimeFieldNumber;
const int AIConfig::kDataFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIConfig::AIConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_aiconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aicfg.AIConfig)
}
AIConfig::AIConfig(const AIConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_path().size() > 0) {
    model_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_path_);
  }
  ::memcpy(&runtime_, &from.runtime_,
    reinterpret_cast<char*>(&data_format_) -
    reinterpret_cast<char*>(&runtime_) + sizeof(data_format_));
  // @@protoc_insertion_point(copy_constructor:aicfg.AIConfig)
}

void AIConfig::SharedCtor() {
  model_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&runtime_, 0, reinterpret_cast<char*>(&data_format_) -
    reinterpret_cast<char*>(&runtime_) + sizeof(data_format_));
  _cached_size_ = 0;
}

AIConfig::~AIConfig() {
  // @@protoc_insertion_point(destructor:aicfg.AIConfig)
  SharedDtor();
}

void AIConfig::SharedDtor() {
  model_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AIConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIConfig::descriptor() {
  protobuf_aiconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aiconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AIConfig& AIConfig::default_instance() {
  protobuf_aiconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

AIConfig* AIConfig::New(::google::protobuf::Arena* arena) const {
  AIConfig* n = new AIConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AIConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:aicfg.AIConfig)
  model_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&runtime_, 0, reinterpret_cast<char*>(&data_format_) -
    reinterpret_cast<char*>(&runtime_) + sizeof(data_format_));
}

bool AIConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aicfg.AIConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_path().data(), this->model_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aicfg.AIConfig.model_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aicfg.RunTime runtime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_runtime(static_cast< ::aicfg::RunTime >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aicfg.DataFormat data_format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_format(static_cast< ::aicfg::DataFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aicfg.AIConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aicfg.AIConfig)
  return false;
#undef DO_
}

void AIConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aicfg.AIConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_path = 1;
  if (this->model_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_path().data(), this->model_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aicfg.AIConfig.model_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_path(), output);
  }

  // .aicfg.RunTime runtime = 2;
  if (this->runtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->runtime(), output);
  }

  // .aicfg.DataFormat data_format = 3;
  if (this->data_format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->data_format(), output);
  }

  // @@protoc_insertion_point(serialize_end:aicfg.AIConfig)
}

::google::protobuf::uint8* AIConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aicfg.AIConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_path = 1;
  if (this->model_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_path().data(), this->model_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aicfg.AIConfig.model_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_path(), target);
  }

  // .aicfg.RunTime runtime = 2;
  if (this->runtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->runtime(), target);
  }

  // .aicfg.DataFormat data_format = 3;
  if (this->data_format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->data_format(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aicfg.AIConfig)
  return target;
}

size_t AIConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aicfg.AIConfig)
  size_t total_size = 0;

  // string model_path = 1;
  if (this->model_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_path());
  }

  // .aicfg.RunTime runtime = 2;
  if (this->runtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->runtime());
  }

  // .aicfg.DataFormat data_format = 3;
  if (this->data_format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_format());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aicfg.AIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AIConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AIConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aicfg.AIConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aicfg.AIConfig)
    MergeFrom(*source);
  }
}

void AIConfig::MergeFrom(const AIConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aicfg.AIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_path().size() > 0) {

    model_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_path_);
  }
  if (from.runtime() != 0) {
    set_runtime(from.runtime());
  }
  if (from.data_format() != 0) {
    set_data_format(from.data_format());
  }
}

void AIConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aicfg.AIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIConfig::CopyFrom(const AIConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aicfg.AIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIConfig::IsInitialized() const {
  return true;
}

void AIConfig::Swap(AIConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIConfig::InternalSwap(AIConfig* other) {
  model_path_.Swap(&other->model_path_);
  std::swap(runtime_, other->runtime_);
  std::swap(data_format_, other->data_format_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AIConfig::GetMetadata() const {
  protobuf_aiconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aiconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AIConfig

// string model_path = 1;
void AIConfig::clear_model_path() {
  model_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AIConfig::model_path() const {
  // @@protoc_insertion_point(field_get:aicfg.AIConfig.model_path)
  return model_path_.GetNoArena();
}
void AIConfig::set_model_path(const ::std::string& value) {
  
  model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aicfg.AIConfig.model_path)
}
#if LANG_CXX11
void AIConfig::set_model_path(::std::string&& value) {
  
  model_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aicfg.AIConfig.model_path)
}
#endif
void AIConfig::set_model_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aicfg.AIConfig.model_path)
}
void AIConfig::set_model_path(const char* value, size_t size) {
  
  model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aicfg.AIConfig.model_path)
}
::std::string* AIConfig::mutable_model_path() {
  
  // @@protoc_insertion_point(field_mutable:aicfg.AIConfig.model_path)
  return model_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AIConfig::release_model_path() {
  // @@protoc_insertion_point(field_release:aicfg.AIConfig.model_path)
  
  return model_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AIConfig::set_allocated_model_path(::std::string* model_path) {
  if (model_path != NULL) {
    
  } else {
    
  }
  model_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_path);
  // @@protoc_insertion_point(field_set_allocated:aicfg.AIConfig.model_path)
}

// .aicfg.RunTime runtime = 2;
void AIConfig::clear_runtime() {
  runtime_ = 0;
}
::aicfg::RunTime AIConfig::runtime() const {
  // @@protoc_insertion_point(field_get:aicfg.AIConfig.runtime)
  return static_cast< ::aicfg::RunTime >(runtime_);
}
void AIConfig::set_runtime(::aicfg::RunTime value) {
  
  runtime_ = value;
  // @@protoc_insertion_point(field_set:aicfg.AIConfig.runtime)
}

// .aicfg.DataFormat data_format = 3;
void AIConfig::clear_data_format() {
  data_format_ = 0;
}
::aicfg::DataFormat AIConfig::data_format() const {
  // @@protoc_insertion_point(field_get:aicfg.AIConfig.data_format)
  return static_cast< ::aicfg::DataFormat >(data_format_);
}
void AIConfig::set_data_format(::aicfg::DataFormat value) {
  
  data_format_ = value;
  // @@protoc_insertion_point(field_set:aicfg.AIConfig.data_format)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AISet::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AISet::AISet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_aiconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aicfg.AISet)
}
AISet::AISet(const AISet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      config_(from.config_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aicfg.AISet)
}

void AISet::SharedCtor() {
  _cached_size_ = 0;
}

AISet::~AISet() {
  // @@protoc_insertion_point(destructor:aicfg.AISet)
  SharedDtor();
}

void AISet::SharedDtor() {
}

void AISet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AISet::descriptor() {
  protobuf_aiconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aiconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AISet& AISet::default_instance() {
  protobuf_aiconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

AISet* AISet::New(::google::protobuf::Arena* arena) const {
  AISet* n = new AISet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AISet::Clear() {
// @@protoc_insertion_point(message_clear_start:aicfg.AISet)
  config_.Clear();
}

bool AISet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aicfg.AISet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aicfg.AIConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aicfg.AISet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aicfg.AISet)
  return false;
#undef DO_
}

void AISet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aicfg.AISet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aicfg.AIConfig config = 1;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config(i), output);
  }

  // @@protoc_insertion_point(serialize_end:aicfg.AISet)
}

::google::protobuf::uint8* AISet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aicfg.AISet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aicfg.AIConfig config = 1;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->config(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aicfg.AISet)
  return target;
}

size_t AISet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aicfg.AISet)
  size_t total_size = 0;

  // repeated .aicfg.AIConfig config = 1;
  {
    unsigned int count = this->config_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AISet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aicfg.AISet)
  GOOGLE_DCHECK_NE(&from, this);
  const AISet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AISet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aicfg.AISet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aicfg.AISet)
    MergeFrom(*source);
  }
}

void AISet::MergeFrom(const AISet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aicfg.AISet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_.MergeFrom(from.config_);
}

void AISet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aicfg.AISet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AISet::CopyFrom(const AISet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aicfg.AISet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AISet::IsInitialized() const {
  return true;
}

void AISet::Swap(AISet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AISet::InternalSwap(AISet* other) {
  config_.InternalSwap(&other->config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AISet::GetMetadata() const {
  protobuf_aiconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aiconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AISet

// repeated .aicfg.AIConfig config = 1;
int AISet::config_size() const {
  return config_.size();
}
void AISet::clear_config() {
  config_.Clear();
}
const ::aicfg::AIConfig& AISet::config(int index) const {
  // @@protoc_insertion_point(field_get:aicfg.AISet.config)
  return config_.Get(index);
}
::aicfg::AIConfig* AISet::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:aicfg.AISet.config)
  return config_.Mutable(index);
}
::aicfg::AIConfig* AISet::add_config() {
  // @@protoc_insertion_point(field_add:aicfg.AISet.config)
  return config_.Add();
}
::google::protobuf::RepeatedPtrField< ::aicfg::AIConfig >*
AISet::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:aicfg.AISet.config)
  return &config_;
}
const ::google::protobuf::RepeatedPtrField< ::aicfg::AIConfig >&
AISet::config() const {
  // @@protoc_insertion_point(field_list:aicfg.AISet.config)
  return config_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace aicfg

// @@protoc_insertion_point(global_scope)
